Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
new file mode 100644
--- /dev/null	(date 1736950240357)
+++ b/.idea/misc.xml	(date 1736950240357)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="Black">
+    <option name="sdkName" value="Python 3.12 (biwak-hack)" />
+  </component>
+</project>
\ No newline at end of file
Index: backend.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># highlights.category, highlights.text\r\n# location.location\r\n# tags[..].display_value || tags_v2[..].display_value\r\n# funding\r\n# external_description\r\n\r\n# customer_type\r\n# tags_v2\r\n# location\r\n# headcount\r\n# funding\r\n\r\nfrom mock import mock\r\n\r\n\r\ndef start_backend(company_name: str) -> dict:\r\n    company_info = get_company_info(company_name)\r\n\r\n    # TODO: set filters to company_info\r\n    keywords = extract_keyword(company_info)\r\n\r\n    if validate_keywords(keywords):\r\n        # manually validated by user\r\n        pass\r\n\r\n    result = run_query(company_info, keywords)  # and validate\r\n    return result or mock\r\n\r\n\r\ndef get_company_info(company_name: str) -> str:\r\n    pass\r\n\r\n\r\ndef extract_keyword(company_info: dict) -> list[str]:\r\n    pass\r\n\r\n\r\ndef validate_keywords(keywords: list[str]) -> bool:\r\n    pass\r\n\r\n\r\ndef run_query(company_info: dict, keywords: list[str]) -> dict:\r\n    # Can be recursively called\r\n    queries = generate_queries(company_info, keywords)\r\n    db = {}\r\n\r\n    for query in queries:\r\n        result = call_query(query)\r\n        # maybe validate at this step?\r\n        db = aggr_query_results(db, result)\r\n\r\n    is_valid = validate_db(company_info, db)\r\n\r\n    if is_valid:\r\n        return db\r\n    else:\r\n        return run_query(company_info, keywords)\r\n\r\n\r\ndef generate_queries(company_info: dict, keywords: list[str]) -> list[str]:\r\n    # TODO validate queries with company_info\r\n    # KINDA HARD - we can mock\r\n    return []\r\n\r\n\r\ndef call_query(query: str) -> dict:\r\n    pass\r\n\r\n\r\ndef aggr_query_results(db: dict, result: dict) -> dict:\r\n    pass\r\n\r\n\r\ndef validate_db(company_info: dict, db: dict) -> bool:\r\n\r\n    # HARD\r\n    # filter with company_info.filters\r\n    return True\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/backend.py b/backend.py
--- a/backend.py	(revision 8288356644fadda8447c3595067eac3991d6b298)
+++ b/backend.py	(date 1736960272260)
@@ -3,6 +3,7 @@
 # tags[..].display_value || tags_v2[..].display_value
 # funding
 # external_description
+import os
 
 # customer_type
 # tags_v2
@@ -10,14 +11,30 @@
 # headcount
 # funding
 
+from harmonic_client import HarmonicClient
 from mock import mock
+from openai_client import OpenAIClient
+
 
+async def start_backend(company_domain: str) -> dict:
+    harmonic_client = HarmonicClient(os.getenv("HARMONIC_API_KEY"))
+    openai_client = OpenAIClient()
 
-def start_backend(company_name: str) -> dict:
-    company_info = get_company_info(company_name)
+    # This will be the blue-print for the final implementation. For now, we are mocking the generated query.
+    possible_client, possible_query = openai_client.generate_queries("Find competitors for company with domain: " + company_domain)
+    possible_client = "Harmonic"
+    if possible_client == "Harmonic":
+        answers = await harmonic_client.run_query(possible_query)
+        if answers:
+            return answers
+        else
+
+    target_company_dict = await harmonic_client.get_company_info_by_domain(company_domain)
+    description = target_company_dict.get("description")
 
     # TODO: set filters to company_info
-    keywords = extract_keyword(company_info)
+    keywords = openai_client.query_chat()
+    # keywords = extract_keyword(description)
 
     if validate_keywords(keywords):
         # manually validated by user
@@ -27,7 +44,7 @@
     return result or mock
 
 
-def get_company_info(company_name: str) -> str:
+def get_company_info(company_domain: str) -> str:
     pass
 
 
Index: .idea/.gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/.gitignore b/.idea/.gitignore
new file mode 100644
--- /dev/null	(date 1736950240338)
+++ b/.idea/.gitignore	(date 1736950240338)
@@ -0,0 +1,8 @@
+# Default ignored files
+/shelf/
+/workspace.xml
+# Editor-based HTTP Client requests
+/httpRequests/
+# Datasource local storage ignored files
+/dataSources/
+/dataSources.local.xml
Index: .idea/inspectionProfiles/profiles_settings.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/inspectionProfiles/profiles_settings.xml b/.idea/inspectionProfiles/profiles_settings.xml
new file mode 100644
--- /dev/null	(date 1736950240357)
+++ b/.idea/inspectionProfiles/profiles_settings.xml	(date 1736950240357)
@@ -0,0 +1,6 @@
+<component name="InspectionProjectProfileManager">
+  <settings>
+    <option name="USE_PROJECT_PROFILE" value="false" />
+    <version value="1.0" />
+  </settings>
+</component>
\ No newline at end of file
Index: .idea/biwak-hack.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/biwak-hack.iml b/.idea/biwak-hack.iml
new file mode 100644
--- /dev/null	(date 1736950240338)
+++ b/.idea/biwak-hack.iml	(date 1736950240338)
@@ -0,0 +1,10 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<module type="PYTHON_MODULE" version="4">
+  <component name="NewModuleRootManager">
+    <content url="file://$MODULE_DIR$">
+      <excludeFolder url="file://$MODULE_DIR$/.venv" />
+    </content>
+    <orderEntry type="jdk" jdkName="Python 3.12 (biwak-hack)" jdkType="Python SDK" />
+    <orderEntry type="sourceFolder" forTests="false" />
+  </component>
+</module>
\ No newline at end of file
Index: .idea/modules.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/modules.xml b/.idea/modules.xml
new file mode 100644
--- /dev/null	(date 1736950240360)
+++ b/.idea/modules.xml	(date 1736950240360)
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectModuleManager">
+    <modules>
+      <module fileurl="file://$PROJECT_DIR$/.idea/biwak-hack.iml" filepath="$PROJECT_DIR$/.idea/biwak-hack.iml" />
+    </modules>
+  </component>
+</project>
\ No newline at end of file
Index: interface.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import streamlit as st\r\nfrom backend import start_backend\r\nimport time\r\n\r\n# Application title\r\nst.markdown(\"\"\"\r\n    <h1 style=\"color: #1f77b4;\">TenX</h1> \r\n    <h3>The only AI productivity tool needed for VCs</h3>\r\n    <p>Ask a question to analyze the competition.</p>\r\n\"\"\", unsafe_allow_html=True)\r\n\r\n# User input for the question\r\nquestion = st.text_input(\"Ask a question:\", placeholder=\"E.g., Who are Google's competitors?\")\r\n\r\n\r\ndef display_competitors(competitors):\r\n    \"\"\"Displays the list of competitors in a structured table format.\"\"\"\r\n    st.subheader(\"Competitors Found:\")\r\n\r\n    # Prepare data for the table\r\n    table_data = []\r\n    for competitor in competitors:\r\n        table_data.append({\r\n            \"Name\": competitor['name'],\r\n            \"Accuracy\": competitor['accuracy'],  # Corrected spelling from 'accouracy'\r\n            \"Website\": competitor['website'],\r\n            \"Description\": competitor['description'],\r\n            \"Headcount\": competitor['headcount']\r\n        })\r\n\r\n    # Sort the table data by accuracy in descending order\r\n    table_data.sort(key=lambda x: x['Accuracy'], reverse=True)\r\n\r\n    # Display the data as a table\r\n    st.table(table_data)  # Use st.table to display the data in a table format\r\n\r\n\r\n# Button to submit the question\r\nif st.button(\"Submit Question\", key=\"submit\"):\r\n    if question:\r\n        st.write(f\"**TenX is thinking for query...**\")\r\n\r\n        # Simulating the thinking process\r\n        time.sleep(2)\r\n\r\n        st.write(\"**Now querying Harmonic...**\")\r\n\r\n        # Simulate querying Harmonic with a delay\r\n        time.sleep(2)\r\n\r\n        st.write(\"**Harmonic return to company...**\")\r\n\r\n        # Simulate the response return from Harmonic with a delay\r\n        time.sleep(2)\r\n\r\n        st.write(\"**TenX is validating results...**\")\r\n\r\n        # Simulate the validation process with a delay\r\n        time.sleep(2)\r\n\r\n        # Call start_backend with the question\r\n        backend_data = start_backend(question)  # Pass question as an argument\r\n\r\n        if isinstance(backend_data, list):  # Check if backend_data is a list\r\n            st.success(\"Competitors found!\")\r\n            display_competitors(backend_data)  # Use the backend data directly\r\n\r\n        else:\r\n            st.warning(\"Unexpected data format received from the backend.\")\r\n    else:\r\n        st.warning(\"Please enter a question.\")\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/interface.py b/interface.py
--- a/interface.py	(revision 8288356644fadda8447c3595067eac3991d6b298)
+++ b/interface.py	(date 1736960272264)
@@ -1,4 +1,7 @@
+import asyncio
+
 import streamlit as st
+import random
 from backend import start_backend
 import time
 
@@ -35,6 +38,7 @@
     st.table(table_data)  # Use st.table to display the data in a table format
 
 
+<<<<<<< HEAD
 # Button to submit the question
 if st.button("Submit Question", key="submit"):
     if question:
@@ -61,6 +65,11 @@
         # Call start_backend with the question
         backend_data = start_backend(question)  # Pass question as an argument
 
+=======
+        # Call start_backend with the company_name
+        backend_data= asyncio.run(start_backend(company_name)) # Pass company_name as an argument
+        
+>>>>>>> a1730c3ebaa3475df1f3a6a3e225ee1671da4839
         if isinstance(backend_data, list):  # Check if backend_data is a list
             st.success("Competitors found!")
             display_competitors(backend_data)  # Use the backend data directly
Index: openai_client.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import asyncio\r\nimport openai\r\n\r\nfrom dotenv import load_dotenv\r\nimport os\r\n\r\nload_dotenv()\r\n\r\n\r\nclass OpenAIClient:\r\n    def __init__(self, model: str = \"gpt-4\"):\r\n        OPENAI_API_KEY = os.getenv(\"OPENAI_API_KEY\")\r\n        openai.api_key = OPENAI_API_KEY\r\n        self.model = model\r\n\r\n    def query_chat(self, messages: list, max_tokens: int = 150, temperature: float = 0.7):\r\n        try:\r\n            completion = openai.ChatCompletion.create(\r\n                model=self.model,\r\n                messages=messages,\r\n                max_tokens=max_tokens,\r\n                temperature=temperature,\r\n            )\r\n            # Extract the content of the response\r\n            return completion[\"choices\"][0][\"message\"][\"content\"].strip()\r\n        except Exception as e:\r\n            return f\"An error occurred: {e}\"\r\n\r\n\r\nasync def get_company_key_words(company_name: str, company_domain: str, company_description: str):\r\n    client = OpenAIClient()\r\n\r\n    system_prompt = \"\"\"\r\n    You are a VC analyst trying to find direct competitors for a provided company, in their niche area. \\n\r\n    You will be given a company's domain, name and description. Please return 4 key words that can be used to identify \r\n    the niche specialty of the company. Return the results in an array of strings.\r\n    \"\"\"\r\n    user_prompt = f\"\"\"\r\n    Company: \"{company_name}\" \\n\r\n    Domain: \"{company_domain}\" \\n\r\n    Description: \"{company_description}\" \"\"\"\r\n    inputs = [\r\n        {\"role\": \"system\", \"content\": system_prompt},\r\n        {\"role\": \"user\", \"content\": user_prompt}\r\n    ]\r\n    res = client.query_chat(inputs)\r\n    print(res)\r\n    return res\r\n\r\n\r\ndef get_entry_description(entry: dict):\r\n    return \"\"\r\n\r\n\r\nasync def validate_db_with_openai(company_info: str, db: list) -> dict:\r\n    client = OpenAIClient()\r\n\r\n    for entry in db:\r\n        # TODO instead of OpenAI (LLM) use vector search\r\n\r\n        system_prompt = f\"\"\"\r\n        You are a vector search comparator. You need to compare the following \r\n        company description: \"{company_info}\" with any string the user propmts.\r\n        Give the answer in a normalized accuracy from 0 to 1.\r\n        \"\"\"\r\n        user_prompt = get_entry_description(entry)\r\n        inputs = [\r\n            {\"role\": \"system\", \"content\": system_prompt},\r\n            {\"role\": \"user\", \"content\": user_prompt}\r\n        ]\r\n        res = client.query_chat(inputs)\r\n        print(res)\r\n        entry[\"accuracy\"] = res\r\n\r\n    return db\r\n\r\n\r\nif __name__ == \"__main__\":\r\n\r\n    async def main():\r\n\r\n        company_name = \"Motion Society\"\r\n        domain = \"motionsociety.com\"\r\n        description = \"Motion Society helps content creators reaching their full potential and develops their brands in all social medias. Motion Society currently brings together a diversified and strong community of creators spanning from a lot of different worlds. Our team is fully dedicated to make them blossom on Facebook, Instagram, Snapchat, TikTok, Pinterest and YouTube.\"\r\n        key_words = await get_company_key_words(company_name, domain, description)\r\n\r\n        # Query the client\r\n        print(key_words)\r\n\r\n    asyncio.run(main())\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/openai_client.py b/openai_client.py
--- a/openai_client.py	(revision 8288356644fadda8447c3595067eac3991d6b298)
+++ b/openai_client.py	(date 1736960272264)
@@ -26,26 +26,23 @@
         except Exception as e:
             return f"An error occurred: {e}"
 
-
-async def get_company_key_words(company_name: str, company_domain: str, company_description: str):
-    client = OpenAIClient()
-
-    system_prompt = """
-    You are a VC analyst trying to find direct competitors for a provided company, in their niche area. \n
-    You will be given a company's domain, name and description. Please return 4 key words that can be used to identify 
-    the niche specialty of the company. Return the results in an array of strings.
-    """
-    user_prompt = f"""
-    Company: "{company_name}" \n
-    Domain: "{company_domain}" \n
-    Description: "{company_description}" """
-    inputs = [
-        {"role": "system", "content": system_prompt},
-        {"role": "user", "content": user_prompt}
-    ]
-    res = client.query_chat(inputs)
-    print(res)
-    return res
+    async def get_company_key_words(self, company_name: str, company_domain: str, company_description: str):
+        system_prompt = """
+        You are a VC analyst trying to find direct competitors for a provided company, in their niche area. \n
+        You will be given a company's domain, name and description. Please return 4 key words that can be used to identify 
+        the niche specialty of the company. Return the results in an array of strings.
+        """
+        user_prompt = f"""
+        Company: "{company_name}" \n
+        Domain: "{company_domain}" \n
+        Description: "{company_description}" """
+        inputs = [
+            {"role": "system", "content": system_prompt},
+            {"role": "user", "content": user_prompt}
+        ]
+        res = self.query_chat(inputs)
+        print(res)
+        return res
 
 
 def get_entry_description(entry: dict):
Index: .idea/vcs.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/vcs.xml b/.idea/vcs.xml
new file mode 100644
--- /dev/null	(date 1736950240360)
+++ b/.idea/vcs.xml	(date 1736950240360)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="VcsDirectoryMappings">
+    <mapping directory="" vcs="Git" />
+  </component>
+</project>
\ No newline at end of file
Index: harmonic_client.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import asyncio\r\nimport aiohttp\r\nfrom dotenv import load_dotenv\r\nimport os\r\n\r\nload_dotenv()\r\n\r\n\r\nasync def get_company_info_by_domain(website_domain, api_key):\r\n    url = f\"https://api.harmonic.ai/companies?website_domain={website_domain}\"\r\n    headers = {'apikey': api_key}\r\n\r\n    async with aiohttp.ClientSession() as session:\r\n        try:\r\n            async with session.post(url, headers=headers) as response:\r\n                response.raise_for_status()  # Raise an exception for bad responses (4xx or 5xx)\r\n                return await response.json()\r\n        except aiohttp.ClientError as e:\r\n            print(f\"Error getting company description: {e}\")\r\n            return None\r\n\r\nasync def get_companies_by_key_words(api_key, key_words: list[str]):\r\n    url = f\"https://api.harmonic.ai/search/companies_by_keywords\"\r\n    headers = {'apikey': api_key}\r\n    body = {\"contains_any_of_keywords\": \",\".join(key_words), \"include_ids_only\": False}\r\n\r\n    async with aiohttp.ClientSession() as session:\r\n        try:\r\n            async with session.post(url, headers=headers, json=body) as response:\r\n                response.raise_for_status()  # Raise an exception for bad responses (4xx or 5xx)\r\n                return await response.json()\r\n        except aiohttp.ClientError as e:\r\n            print(f\"Error getting company description: {e}\")\r\n            return None\r\n\r\n\r\nasync def get_companies_info_by_ids(ids, api_key):\r\n    url = \"https://api.harmonic.ai/companies/batchGet\"\r\n    body = {\r\n        \"ids\": ids\r\n    }\r\n    headers = {'apikey': api_key}\r\n\r\n    async with aiohttp.ClientSession() as session:\r\n        try:\r\n            async with session.post(url, json=body, headers=headers) as response:\r\n                response.raise_for_status()\r\n                return await response.json()\r\n        except aiohttp.ClientError as e:\r\n            print(f\"Error getting company data: {e}\")\r\n            return None\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    async def main():\r\n        website_domain = \"atomico.com\"  # Replace with the actual website domain\r\n        api_key = os.getenv(\"HARMONIC_API_KEY\")\r\n        ids = [3639957, 2261160]\r\n        companies = await get_companies_info_by_ids(ids, api_key)\r\n\r\n        if companies:\r\n            for company in companies:\r\n                headcount = company.get('headcount', 0)\r\n                print(f\"Company {company['id']} has {headcount} employees.\")\r\n\r\n    asyncio.run(main())\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/harmonic_client.py b/harmonic_client.py
--- a/harmonic_client.py	(revision 8288356644fadda8447c3595067eac3991d6b298)
+++ b/harmonic_client.py	(date 1736960272260)
@@ -1,37 +1,48 @@
 import asyncio
+from typing import Optional
+
 import aiohttp
 from dotenv import load_dotenv
 import os
 
 load_dotenv()
 
+COMPANY_FIELDS = ["name", "description", "headcount", "logo_url", "customer_type", "stage", "id", "tags_v2", "funding"]
 
-async def get_company_info_by_domain(website_domain, api_key):
-    url = f"https://api.harmonic.ai/companies?website_domain={website_domain}"
-    headers = {'apikey': api_key}
+class HarmonicClient:
+    def __init__(self, api_key):
+        self.api_key = api_key
+
+    async def get_company_info_by_domain(self, website_domain) -> Optional[dict]:
+        # Theoretically, this URL needs to be produced by LLM
+        url = f"https://api.harmonic.ai/companies?website_domain={website_domain}"
+        headers = {'apikey': self.api_key}
 
-    async with aiohttp.ClientSession() as session:
-        try:
-            async with session.post(url, headers=headers) as response:
-                response.raise_for_status()  # Raise an exception for bad responses (4xx or 5xx)
-                return await response.json()
-        except aiohttp.ClientError as e:
-            print(f"Error getting company description: {e}")
-            return None
+        async with aiohttp.ClientSession() as session:
+            try:
+                async with session.post(url, headers=headers) as response:
+                    response.raise_for_status()  # Raise an exception for bad responses (4xx or 5xx)
+                    company_obj = await response.json()
+                    filtered_obj = {field: company_obj[field] for field in COMPANY_FIELDS if field in company_obj}
+                    return filtered_obj
+            except aiohttp.ClientError as e:
+                print(f"Error getting company description: {e}")
+                return None
 
-async def get_companies_by_key_words(api_key, key_words: list[str]):
-    url = f"https://api.harmonic.ai/search/companies_by_keywords"
-    headers = {'apikey': api_key}
-    body = {"contains_any_of_keywords": ",".join(key_words), "include_ids_only": False}
+    async def get_companies_by_key_words(self, key_words: list[str]):
+        # Theoretically, this URL needs to be produced by LLM
+        url = f"https://api.harmonic.ai/search/companies_by_keywords"
+        headers = {'apikey': self.api_key}
+        body = {"contains_any_of_keywords": ",".join(key_words), "include_ids_only": False}
 
-    async with aiohttp.ClientSession() as session:
-        try:
-            async with session.post(url, headers=headers, json=body) as response:
-                response.raise_for_status()  # Raise an exception for bad responses (4xx or 5xx)
-                return await response.json()
-        except aiohttp.ClientError as e:
-            print(f"Error getting company description: {e}")
-            return None
+        async with aiohttp.ClientSession() as session:
+            try:
+                async with session.post(url, headers=headers, json=body) as response:
+                    response.raise_for_status()  # Raise an exception for bad responses (4xx or 5xx)
+                    return await response.json()
+            except aiohttp.ClientError as e:
+                print(f"Error getting company description: {e}")
+                return None
 
 
 async def get_companies_info_by_ids(ids, api_key):
@@ -49,18 +60,35 @@
         except aiohttp.ClientError as e:
             print(f"Error getting company data: {e}")
             return None
+
+async def get_similar_sites(id, api_key, size=10):
+    url = f"https://api.harmonic.ai/search/similar_companies/{id}?size={size}"
+    headers = {'apikey': api_key}
+
+    async with aiohttp.ClientSession() as session:
+        try:
+            async with session.get(url, headers=headers) as response:
+                response.raise_for_status()
+                return await response.json()
+
+        except aiohttp.ClientError as e:
+            print(f"Error fetching similar companies: {e}")
+            return None
 
 
 if __name__ == "__main__":
     async def main():
         website_domain = "atomico.com"  # Replace with the actual website domain
         api_key = os.getenv("HARMONIC_API_KEY")
-        ids = [3639957, 2261160]
-        companies = await get_companies_info_by_ids(ids, api_key)
+        id = 2261160
 
-        if companies:
-            for company in companies:
-                headcount = company.get('headcount', 0)
-                print(f"Company {company['id']} has {headcount} employees.")
+        similar_companies_data = await get_similar_sites(id, api_key)
+
+        if similar_companies_data:
+            print("Similar Companies:")
+            for urn in similar_companies_data.get('results', []):
+                print(urn)
+        else:
+            print("No similar companies data found.")
 
     asyncio.run(main())
diff --git a/api_config.json b/api_config.json
new file mode 100644
